from tabulate import tabulate

# Definieer de lijst van programmeurs met gemeentes uit Belgisch Limburg
lijst_programmeurs = [
    {"naam": "Jan", "gemeente": "Hasselt", "uurloon": 50, "programmeertalen": ["Python", "Java"]},
    {"naam": "Emma", "gemeente": "Genk", "uurloon": 60, "programmeertalen": ["C#", "JavaScript", "SQL"]},
    {"naam": "Lars", "gemeente": "Maasmechelen", "uurloon": 55, "programmeertalen": ["Ruby", "PHP"]},
    {"naam": "Sophie", "gemeente": "Sint-Truiden", "uurloon": 48, "programmeertalen": ["Python", "Go", "Rust"]},
    {"naam": "Tom", "gemeente": "Tongeren", "uurloon": 52, "programmeertalen": ["Swift", "Objective-C"]},
    {"naam": "Lisa", "gemeente": "Beringen", "uurloon": 58, "programmeertalen": ["Kotlin", "C++", "Perl"]},
    {"naam": "Kevin", "gemeente": "Lommel", "uurloon": 47, "programmeertalen": ["Java", "Scala", "Python"]}
]

# Maak de data klaar voor tabulate
table_data = [
    [p['naam'], p['gemeente'], p['uurloon'], ', '.join(p['programmeertalen'])]
    for p in lijst_programmeurs
]

# Headers voor de tabel
headers = ["Naam", "Gemeente", "Uurloon (EUR)", "Programmeertalen"]

# Toon de tabel met tabulate
print(tabulate(table_data, headers=headers, tablefmt="grid"))


#### voorbeeld 2

from tabulate import tabulate

# Begin met 4 dictionaries (personen) met naam, leeftijd en woonplaats
personen = [
    {"naam": "Jan", "leeftijd": 28, "woonplaats": "Amsterdam"},
    {"naam": "Lisa", "leeftijd": 34, "woonplaats": "Rotterdam"},
    {"naam": "Ahmed", "leeftijd": 22, "woonplaats": "Utrecht"},
    {"naam": "Sophie", "leeftijd": 40, "woonplaats": "Den Haag"}
]


# Functie om alle items in een tabulate-tabel te tonen
def toon_items(lijst):
    headers = ["#", "Naam", "Leeftijd", "Woonplaats"]
    tabel = []
    for index, persoon in enumerate(lijst, start=1):
        tabel.append([index, persoon["naam"], persoon["leeftijd"], persoon["woonplaats"]])

    print(tabulate(tabel, headers, tablefmt="grid"))


# Functie om een nieuw item (persoon) toe te voegen aan de lijst
def voeg_items_toe(lijst, naam, leeftijd, woonplaats):
    nieuwe_persoon = {"naam": naam, "leeftijd": leeftijd, "woonplaats": woonplaats}
    lijst.append(nieuwe_persoon)
    print(f"{naam} is toegevoegd aan de lijst.")


# Functie om een item te verwijderen op basis van index
def verwijder_item(lijst, index):
    try:
        verwijderde_persoon = lijst.pop(index - 1)
        print(f"{verwijderde_persoon['naam']} is verwijderd uit de lijst.")
    except IndexError:
        print(f"Fout: Er is geen persoon met index {index}.")


# Test de functies
print("Oorspronkelijke lijst:")
toon_items(personen)

print("\nVoeg een nieuwe persoon toe:")
voeg_items_toe(personen, "Karin", 25, "Leiden")

print("\nLijst na toevoegen:")
toon_items(personen)

print("\nVerwijder het 2e item (Lisa):")
verwijder_item(personen, 3)

print("\nLijst na verwijderen:")
toon_items(personen)

#####voorbeeld 2
from tabulate import tabulate

# Dezelfde data in een dictionary
data = {
    1: {"naam": "Jan Peeters", "leeftijd": 28, "woonplaats": "Hasselt"},
    2: {"naam": "Anke Jansen", "leeftijd": 34, "woonplaats": "Genk"},
    3: {"naam": "Tom Willems", "leeftijd": 22, "woonplaats": "Maasmechelen"},
    4: {"naam": "Sara Dubois", "leeftijd": 29, "woonplaats": "Sint-Truiden"},
    5: {"naam": "Pieter Martens", "leeftijd": 45, "woonplaats": "Tongeren"},
    6: {"naam": "Liesbeth Verhoeven", "leeftijd": 31, "woonplaats": "Bilzen"}
}

# Lege 2D-lijst maken
data_list = []

# Eerste for-lus om de dictionary keys (ID's) te doorlopen
for key, info in data.items():
    row = [key]  # Voeg de key (ID) toe aan de rij
    # Tweede for-lus om de naam, leeftijd en woonplaats toe te voegen
    for k, v in info.items():
        row.append(v)
    data_list.append(row)

# Gebruik tabulate om de data mooi weer te geven
headers = ["ID", "Naam", "Leeftijd", "Woonplaats"]
print(tabulate(data_list, headers=headers, tablefmt="pretty-grid"))


